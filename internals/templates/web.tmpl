package web

import (
        "{{ .ModuleName }}/internals/data"
        "{{ .ModuleName }}/internals/models"
        "net/http"
        "strconv"

        "github.com/gin-gonic/gin"
)

type {{title .Table.Name}}Service struct {
	Handler *data.{{title .Table.Name}}Handler
}

func New{{title .Table.Name}}Service(handler *data.{{title .Table.Name}}Handler) *{{title .Table.Name}}Service {
	return &{{title .Table.Name}}Service{Handler: handler}
}

func (c *{{title .Table.Name}}Service) Get{{title .Table.Name}}(ctx *gin.Context) {
	{{.Table.Name}}, err := c.Handler.Get{{title .Table.Name}}()
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"message": err})
		return
	}

	if {{.Table.Name}} != nil {
		ctx.JSON(http.StatusOK, {{.Table.Name}})
		return
	}

	ctx.JSON(http.StatusNotFound, nil)
}

func (c *{{title .Table.Name}}Service) Get{{title .Table.Name}}ById(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, err)
		return
	}

	{{ .Table.Name}}, err := c.Handler.Get{{title .Table.Name}}ById(id)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, err)
		return
	}

	if {{ .Table.Name}} != nil {
		ctx.JSON(http.StatusOK, {{ .Table.Name}})
		return
	}

	ctx.JSON(http.StatusNotFound, nil)
}

func (c *{{title .Table.Name}}Service) Post{{title .Table.Name}}(ctx *gin.Context) {
	var {{.Table.Name}} models.{{title .Table.Name}}

	if err := ctx.BindJSON(&{{.Table.Name}}); err != nil {
		return
	}

	id, err := c.Handler.Insert{{title .Table.Name}}(&{{.Table.Name}})
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, err)
		return
	}

	ctx.JSON(http.StatusCreated, id)
}

func (h *{{title .Table.Name}}Service) Delete{{title .Table.Name}}(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, err)
		return
	}

	err = h.Handler.Delete{{title .Table.Name}}(id)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, err)
		return
	}

	ctx.JSON(http.StatusAccepted, nil)
}

func (h *{{title .Table.Name}}Service) Patch{{title .Table.Name}}(ctx *gin.Context) {
	var {{.Table.Name}} models.{{title .Table.Name}}

	if err := ctx.BindJSON(&{{.Table.Name}}); err != nil {
		return
	}

	err := h.Handler.Update{{title .Table.Name}}(&{{.Table.Name}})
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, err)
		return
	}

	ctx.JSON(http.StatusOK, {{.Table.Name}})
}
