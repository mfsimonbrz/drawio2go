package internals

import (
	"bytes"
	"drawio2go/models"
	"fmt"
	"os"
	"strings"
	"text/template"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

func GenerateStruct(table *models.Table) string {
	caser := cases.Title(language.Und)
	var sb bytes.Buffer
	sb.WriteString(fmt.Sprintf("type %s struct {\n", caser.String(table.Name)))
	for _, field := range table.Fields {
		sb.WriteString(fmt.Sprintf("\t%s\t%s\t`%s:\"%s\"`\n", field.Name, field.Type, strings.ToLower(table.Name), strings.ToLower(field.Name)))
	}
	sb.WriteString("}\n")

	return sb.String()
}

func generateCreateTableSQLStatement(table *models.Table) string {
	var sb bytes.Buffer
	foreignFields := []*models.Field{}
	sb.WriteString(fmt.Sprintf("CREATE TABLE IF NOT EXISTS %s (", strings.ToLower(table.Name)))
	for pos, field := range table.Fields {
		if pos > 0 {
			sb.WriteString(fmt.Sprintf(", %s %s", strings.ToLower(field.Name), GetDatabaseFieldType(strings.ToLower(field.Type))))
		} else {
			sb.WriteString(fmt.Sprintf("%s %s", strings.ToLower(field.Name), GetDatabaseFieldType(strings.ToLower(field.Type))))
		}
		if !field.Nullable {
			sb.WriteString(" NOT NULL")
		}
		if field.Primary {
			sb.WriteString(" PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY")
		}
		if field.Foreign {
			foreignFields = append(foreignFields, field)
		}
	}

	// Assuming table name is plural, and the key fields follow the pattern: table name singular + _id
	for _, field := range foreignFields {
		foreignTableName := field.Name[0:strings.Index(field.Name, "_")]
		sb.WriteString(fmt.Sprintf(", CONSTRAINT fk_%s FOREIGN KEY (%s) REFERENCES %ss (%s) ON DELETE CASCADE", foreignTableName, field.Name, foreignTableName, field.Name))
	}

	sb.WriteString(");")

	return sb.String()
}

func GenerateSelectAllStatement(table *models.Table) string {
	return fmt.Sprintf("SELECT * FROM %s;", strings.ToLower(table.Name))
}

func GenerateSelectByIdStatement(table *models.Table) string {
	primaryField := table.GetPrimaryKeyField()
	return fmt.Sprintf("SELECT * FROM %s WHERE %s = ?;", table.Name, primaryField.Name)
}

func GenerateDeleteStatement(table *models.Table) string {
	primaryField := table.GetPrimaryKeyField()
	return fmt.Sprintf("DELETE FROM %s WHERE %s = ?;", table.Name, primaryField.Name)
}

func GenerateInsertStatement(table *models.Table) string {
	var sb bytes.Buffer
	sb.WriteString(fmt.Sprintf("INSERT INTO %s VALUES (", strings.ToLower(table.Name)))
	for pos, field := range table.Fields {
		if !field.Primary {
			if pos > 0 {
				sb.WriteString(fmt.Sprintf(", %s = ?", strings.ToLower(field.Name)))
			} else {
				sb.WriteString(fmt.Sprintf("%s = ?", strings.ToLower(field.Name)))
			}
		}
	}
	sb.WriteString(")")

	return sb.String()
}

func GenerateUpdateStatement(table *models.Table) string {
	var sb bytes.Buffer
	sb.WriteString(fmt.Sprintf("UPDATE %s SET", strings.ToLower(table.Name)))
	for pos, field := range table.Fields {
		if !field.Primary {
			if pos > 0 {
				sb.WriteString(fmt.Sprintf(", %s = ?", strings.ToLower(field.Name)))
			} else {
				sb.WriteString(fmt.Sprintf(" %s = ?", strings.ToLower(field.Name)))
			}
		} else {
			sb.WriteString(fmt.Sprintf(" WHERE %s = ?", strings.ToLower(field.Name)))
		}
	}

	return sb.String()
}

func CreateModelsFile(tables []*models.Table, filePath string) error {
	var sb bytes.Buffer

	sb.WriteString("package internals\n\n")

	if HasTimeField(tables) {
		generateImportBlock([]string{"time"})
	}

	for _, table := range tables {
		sb.WriteString(GenerateStruct(table))
		sb.WriteString("\n")
	}

	err := os.WriteFile(fmt.Sprintf("%s/models.go", filePath), sb.Bytes(), 0755)
	if err != nil {
		return err
	}

	return nil
}

func CreateMainFile(filepath string) error {
	var sb bytes.Buffer

	sb.WriteString("package main\n\n")
	sb.WriteString(generateImportBlock([]string{"database/sql", "fmt", "log", "_ github.com/lib/pq"}))
	sb.WriteString("const (\n")
	sb.WriteString("\thost     = \"localhost\"\n")
	sb.WriteString("\tport     = 5432\n")
	sb.WriteString("\tuser     = \"postgres\"\n")
	sb.WriteString("\tpassword = \"<password>\"\n")
	sb.WriteString("\tdbname   = \"<dbname>\"\n")
	sb.WriteString(")\n\n")
	sb.WriteString("func main() {\n")
	sb.WriteString("\tpsqlconn := fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n\n")
	sb.WriteString("\tdb, err := sql.Open(\"postgres\", psqlconn)\n")
	sb.WriteString("\tif err != nil {\n")
	sb.WriteString("\t\tlog.Fatal(err)\n")
	sb.WriteString("\t}\n\n")
	sb.WriteString("\tdefer db.Close()\n\n")
	sb.WriteString("}\n")

	err := os.WriteFile(fmt.Sprintf("%s/main.go", filepath), sb.Bytes(), 0755)
	if err != nil {
		return err
	}
	fmt.Println(sb.String())
	return nil
}

func CreateGoModFile(moduleName string, filepath string) error {
	var sb bytes.Buffer

	sb.WriteString(fmt.Sprintf("module %s\n\n", moduleName))
	sb.WriteString("go 1.22.1\n\n")
	sb.WriteString("require (\n")
	sb.WriteString("\tgithub.com/lib/pq\tv1.10.9\n")
	sb.WriteString(")\n")

	err := os.WriteFile(fmt.Sprintf("%s/go.mod", filepath), sb.Bytes(), 0755)
	if err != nil {
		return err
	}

	return nil
}

func CreateDBInitFile(tables []*models.Table, filepath string) error {
	templateFile := "./internals/templates/init_db.tmpl"
	// funcMap := template.FuncMap{
	// 	"sql_statement": generateCreateTableSQLStatement,
	// }
	tmpl, err := template.New("init_db").ParseFiles(templateFile)

	if err != nil {
		return err
	}

	// outputFile, err := os.Create(fmt.Sprintf("%s/db.go", filepath))
	// if err != nil {
	// 	return err
	// }
	a := []int{1, 2, 3, 4, 5}
	err = tmpl.Execute(os.Stdout, a)
	if err != nil {
		return err
	}

	// var sb bytes.Buffer

	// sb.WriteString("package internals\n\n")
	// sb.WriteString(generateImportBlock([]string{"database/sql", "log"}))
	// sb.WriteString("\n\nfunc InitDB(db *sql.DB) error {\n")
	// attribution := ":="
	// for pos, table := range tables {
	// 	if pos > 0 {
	// 		attribution = "="
	// 	}
	// 	sb.WriteString(fmt.Sprintf("\t//%s\n", strings.ToLower(table.Name)))
	// 	sb.WriteString(fmt.Sprintf("\tquery %s \"%s\"\n", attribution, generateCreateTableSQLStatement(table)))
	// 	sb.WriteString(fmt.Sprintf("\t_, err %s db.Query(query)\n", attribution))
	// 	sb.WriteString("\tif err != nil {\n")
	// 	sb.WriteString("\t\tlog.Fatal(err)\n")
	// 	sb.WriteString("\t}\n\n")
	// }
	// sb.WriteString("\treturn nil\n")
	// sb.WriteString("}")

	// err = os.WriteFile(fmt.Sprintf("%s/db.go", filepath), sb.Bytes(), 0755)
	// if err != nil {
	// 	return err
	// }

	// fmt.Println(sb.String())

	return nil
}

func generateImportBlock(importList []string) string {
	var sb bytes.Buffer

	sb.WriteString("import (\n")
	for _, imp := range importList {
		if imp[0] == '_' {
			sb.WriteString("\t_")
			sb.WriteString(fmt.Sprintf("\t\"%s\"\n", imp[2:]))
		} else {
			sb.WriteString(fmt.Sprintf("\t\"%s\"\n", imp))
		}
	}

	sb.WriteString(")\n")

	return sb.String()
}
